#include <iostream>
#define MAXN 200
#define inf 1000000000
using namespace std;
typedef int elem_t;
struct edge_t{
	int from,to;
	elem_t len;
	edge_t* next;
}*mat[MAXN],edge[MAXN];

int numptr,n,m,x,y,z;
void addedge(int from,int to,int len){
 edge[numptr].to=to;
 edge[numptr].len=len;
 edge[numptr].next=mat[from];
 mat[from]=&edge[numptr++];
}
#define _cp(a,b) ((a)<(b))
struct heap{
	elem_t h[MAXN+1];
	int ind[MAXN+1],map[MAXN+1],n,p,c;
	void init(){n=0;}
	void ins(int i,elem_t e){
		for (p=++n;p>1&&_cp(e,h[p>>1]);h[map[ind[p]=ind[p>>1]]=p]=h[p>>1],p>>=1);
		h[map[ind[p]=i]=p]=e;
	}
	int del(int i,elem_t& e){
		i=map[i];if (i<1||i>n) return 0;
		for (e=h[p=i];p>1;h[map[ind[p]=ind[p>>1]]=p]=h[p>>1],p>>=1);
		for (c=2;c<n&&_cp(h[c+=(c<n-1&&_cp(h[c+1],h[c]))],h[n]);h[map[ind[p]=ind[c]]=p]=h[c],p=c,c<<=1);
		h[map[ind[p]=ind[n]]=p]=h[n];n--;return 1;
	}
	int delmin(int& i,elem_t& e){
		if (n<1) return 0;i=ind[1];
		for (e=h[p=1],c=2;c<n&&_cp(h[c+=(c<n-1&&_cp(h[c+1],h[c]))],h[n]);h[map[ind[p]=ind[c]]=p]=h[c],p=c,c<<=1);
		h[map[ind[p]=ind[n]]=p]=h[n];n--;return 1;
	}
};

void dijkstra(int n,edge_t* list[],int s,elem_t* min,int* pre){
	heap h;
	edge_t* t;elem_t e;
	int v[MAXN],i;
	for (h.init(),i=0;i<n;i++)
		min[i]=((i==s)?0:inf),v[i]=0,pre[i]=-1,h.ins(i,min[i]);
	while (h.delmin(i,e))
		for (v[i]=1,t=list[i];t;t=t->next)
			if (!v[t->to]&&min[i]+t->len<min[t->to])
				pre[t->to]=i,h.del(t->to,e),min[t->to]=e=min[i]+t->len,h.ins(t->to,e);
}
int main(){
    //memset(mat,NULL,sizeof(mat));
    numptr=0;
    int s,s1;
    int pre[MAXN];
    elem_t min[MAXN];
    cin>>n>>m;
    cin>>s>>s1;
    for(int i=0;i<m;i++){
        cin>>x>>y;
       addedge(x,y,1);
    }
    dijkstra(n,mat,s,min,pre);
    cout<<min[s1];
return 0;
}
