#include<string>
#include<iostream>
#include<stack>
using namespace std;
struct In {
    long long sum, ins;
    int left, right, mid;
} s[10000];
int a[10000];
long long int ans;
//建线段树
void Init(int l, int r, int d) {
    s[d].ins = 0;
    s[d].mid = (r + l) / 2;
    s[d].left = l;
    s[d].right = r;
    if(l == r)
        s[d].sum = a[l];
    else {
        Init(l, s[d].mid, 2 * d);
        Init(s[d].mid + 1, r, 2 * d + 1);
        s[d].sum = s[2 * d].sum + s[2 * d + 1].sum;
    }
}
//区间更新值
void Insert(int x, int y, int d, int z) {
    s[d].sum += (y - x + 1) * z;
    if(x == s[d].left && y == s[d].right)
        s[d].ins += z;
    else if(y <= s[d].mid)
        Insert(x, y, 2 * d, z);
    else if(x > s[d].mid)
        Insert(x, y, 2 * d + 1, z);
    else
        Insert(x, s[d].mid, 2 * d, z),
               Insert(s[d].mid + 1, y, 2 * d + 1, z);
}
//区间求和
void question(int x, int y, int d) {
    if(x == s[d].left && y == s[d].right) {
        ans += s[d].sum;
        return ;
    }
    ans += (y - x + 1) * s[d].ins;
    if(y <= s[d].mid)
        question(x, y, 2 * d);
    else if(x > s[d].mid)
        question(x, y, 2 * d + 1);
    else
        question(x, s[d].mid, 2 * d),
                 question(s[d].mid + 1, y, 2 * d + 1);
}
int main() {
    a[1]=1;
    a[2]=1;
    a[3]=1;
    Init(1,3,1);
    Insert(1, 3, 1, 3);
    question(1,3,1);
    cout<<ans;

}
