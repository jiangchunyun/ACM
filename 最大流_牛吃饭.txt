//邻接矩阵的存储是有几个点就有多大的方正
#include<iostream>
#include<stdio.h>
#include <algorithm>
#include<cstring>
using namespace std;
//求网络最大流,邻接阵形式
//返回最大流量,flow返回每条边的流量
//传入网络节点数n,容量mat,源点source,汇点sink
#define MAXN 407
#define inf 1000000000
int mat[MAXN][MAXN];
int source;
int sink;
int flow[MAXN][MAXN];
int n;int max_flow(int n,int mat[][MAXN],int source,int sink,int flow[][MAXN]){
	int pre[MAXN],que[MAXN],d[MAXN],p,q,t,i,j;
	if (source==sink) return inf;
	for (i=0;i<n;i++)
		for (j=0;j<n;flow[i][j++]=0);
	for (;;){
		for (i=0;i<n;pre[i++]=0);
		pre[t=source]=source+1,d[t]=inf;
		for (p=q=0;p<=q&&!pre[sink];t=que[p++])
			for (i=0;i<n;i++)
				if (!pre[i]&&(j=mat[t][i]-flow[t][i]))
					pre[que[q++]=i]=t+1,d[i]=d[t]<j?d[t]:j;
				else if (!pre[i]&&(j=flow[i][t]))
					pre[que[q++]=i]=-t-1,d[i]=d[t]<j?d[t]:j;
		if (!pre[sink]) break;
		for (i=sink;i!=source;)
			if (pre[i]>0)
				flow[pre[i]-1][i]+=d[sink],i=pre[i]-1;
			else
				flow[i][-pre[i]-1]-=d[sink],i=-pre[i]-1;
	}
	for (j=i=0;i<n;j+=flow[source][i++]);
	return j;
}
int main()
{
int N,F,D;
int i,f,d,v;
//食物 饮料 牛
while(scanf("%d%d%d",&N,&F,&D)!=EOF)
{
memset(mat,0,sizeof(mat));
n=N+F+D+N+2;
//食物建立源点
for(i=1;i<=F;++i)mat[0][i]=1;
for(i=1;i<=N;++i)
{
scanf("%d%d",&f,&d);
//建立牛和食物的连线
while(f--)
{
scanf("%d",&v);
mat[v][i+F]=1;
}
//建立牛和饮料的连线
while(d--)
{
scanf("%d",&v);
mat[i+F+N][v+F+N+N]=1;
}
}
//建立饮料的汇点
for(i=1;i<=D;++i)
mat[i+F+N+N][n-1]=1;
//限制牛的流量
for(i=1;i<=N;++i)
mat[i+F][i+F+N]=1;
printf("%d\n",max_flow(n,mat,0,n-1,flow));
}

return 0;
}
