//宽搜用到的是队列
#include <stdio.h>
#include<queue>
#include<iostream>
using namespace std;
struct node
{
    int x,y;
    int val;
    int sign;
};
node a[100][100];
int n,sum=0;
queue<node> Q;
void bfs() {
    Q.push(a[0][0]);
    a[0][0].val=1;
    while(!Q.empty()) {
        node x;
        x = Q.front();
        Q.pop();
        if(x.y==n-1)
        {
            sum++;
        }
        for(int i = 1; i <= 8; i++) {
           if((i==1)&&(a[x.x][x.y+1].val==0)&&(x.y+1<n))
           {
               a[x.x][x.y+1].val=1;
               Q.push(a[x.x][x.y+1]);

           }
           else  if(i==2&&a[x.x][x.y-1].val==0&&x.y-1>=0)
           {
               a[x.x][x.y-1].val=1;
               Q.push(a[x.x][x.y-1]);

           }
            else  if(i==3&&a[x.x-1][x.y].val==0&&x.x-1>=0)
           {
               a[x.x-1][x.y].val=1;
               Q.push(a[x.x-1][x.y]);

           }
            else  if(i==4&&a[x.x+1][x.y].val==0&&x.x+1<n)
           {
               a[x.x+1][x.y].val=1;
               Q.push(a[x.x+1][x.y]);

           }
             else  if(i==5&&a[x.x+1][x.y+1].val==0&&x.x+1<n&&x.y+1<n)
           {
               a[x.x+1][x.y+1].val=1;
               Q.push(a[x.x+1][x.y+1]);

           }
            else  if(i==6&&a[x.x-1][x.y-1].val==0&&x.x-1>=0&&x.y-1>=0)
           {
               a[x.x-1][x.y-1].val=1;
               Q.push(a[x.x-1][x.y-1]);

           }
            else  if(i==7&&a[x.x+1][x.y-1].val==0&&x.x+1<n&&x.y-1>=0)
           {
               a[x.x+1][x.y-1].val=1;
               Q.push(a[x.x+1][x.y-1]);

           }
            else  if(i==6&&a[x.x-1][x.y+1].val==0&&x.x-1>=0&&x.y+1<n)
           {
               a[x.x-1][x.y+1].val=1;
               Q.push(a[x.x-1][x.y+1]);

           }


        }

    }
    if(sum>0)
    cout<<sum;
}
int main()
{

    cin>>n;
    for(int i=0;i<n;i++)
    {
        for(int j=0;j<n;j++)
        {
          int num;
          cin>>num;
          a[i][j].x=i;
          a[i][j].y=j;
          a[i][j].val=num;
          a[i][j].sign=num;
        }

    }
    bfs();
    return 0;
}
